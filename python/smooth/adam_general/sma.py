import numpy as np
from smooth.adam_general._adam_general import adam_fitter
from smooth.adam_general.adam_profile import adamProfileCreator


def sma(y, order=1, h=10, holdout=False):
    """SMA"""
    y = y.astype(np.float64)

    ic = lambda e: np.sum(e**2)
    obs_all = len(y) + h * (1 - holdout)
    obs_in_sample = len(y) - h * holdout
    y_in_sample = y

    E_type = "A"
    T_type = "N"
    S_type = "N"

    components_num_ETS = 0
    components_num_ETS_seasonal = 0
    xreg_number = 0
    constant_required = False
    ot = np.ones_like(y_in_sample)

    def creator_sma(order):
        # lags_model_all = np.ones(shape=(order, 1))
        # This needs to be a vector of values
        lags_model_all = np.arange(1, order+1, dtype="int32").reshape(order, 1)
        lags_model_max = int(max(lags_model_all))
        obs_states = obs_in_sample + lags_model_max

        profiles_recent_table, index_lookup_table = adamProfileCreator(
            lagsModelAll=lags_model_all,
            lagsModelMax=lags_model_max,
            obsAll=obs_all
        ).values()

        # # This needs to be generated by a profileCreator() function
        # profiles_recent_table = np.mean(y_in_sample[0 : (order - 1)]) * np.ones(
        #     shape=(order, lags_model_max), dtype=np.float64
        # )

        # # This as well...
        # index_lookup_table = np.tile(
        #     np.arange(order), (obs_all + lags_model_max, 1)
        # ).T

        matF = np.ones((order, order)) / order
        matWt = np.ones((obs_in_sample, order))

        vecG = np.ones(order) / order
        # matVt = np.zeros((order, obs_states))
        matVt = np.empty((order, obs_states))
        # matVt.fill(np.nan)

        adam_fitted = adam_fitter(
            matrixVt=matVt,
            matrixWt=matWt,
            matrixF=matF,
            vectorG=vecG,
            lags=lags_model_all,
            indexLookupTable=index_lookup_table,
            profilesRecent=profiles_recent_table,
            E=E_type,
            T=T_type,
            S=S_type,
            nNonSeasonal=components_num_ETS,
            nSeasonal=components_num_ETS_seasonal,
            nArima=order,
            nXreg=xreg_number,
            constant=constant_required,
            vectorYt=y_in_sample,
            vectorOt=ot,
            backcast=True,
        )

        return adam_fitted

    return creator_sma(order=order)
